dim(datos_limpios) # 50828  8
# genero una nueva variable de precios en miles para reducir escala en el gráfico
datos_limpios <- datos_limpios %>%
mutate(precio_en_miles = round((price/1e3),0))
# Calculo estadisticas descriptivas de la variable precio
# minimo, primer cuartil (Q1), mediana (o Q2), promedio, Q3 y maximo
estad.descrip.precios <- datos_limpios %>%
summarise(Minimo = min(precio_en_miles),
Q1 = quantile(precio_en_miles, probs = 0.25),
Mediana = quantile(precio_en_miles, probs = 0.5),
Promedio = round(mean(precio_en_miles),0),
Q3 = quantile(precio_en_miles, probs = 0.75),
Maximo = max(precio_en_miles),
Desvio = round(sd(precio_en_miles),0))
# tabla resultante
estad.descrip.precios
# Armo histograma de precios de las propiedades
ggplot(data = datos_limpios, aes(x = precio_en_miles)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de precios de propiedades") +
labs(x = "Precio en miles de USD")
# calculo estadisticas descriptivas pero agrupando por tipo de propiedad
datos_limpios %>%
group_by(property_type) %>%
summarise(Freq_abs = length(precio_en_miles),
Freq_rel = round(length(precio_en_miles)/nrow(datos_limpios)*100,2) ,
Minimo = min(precio_en_miles), Q1 = quantile(precio_en_miles, probs = 0.25),
Mediana = quantile(precio_en_miles, probs = 0.5),
Promedio = round(mean(precio_en_miles),0),
Q3 = quantile(precio_en_miles, probs = 0.75),
Maximo = max(precio_en_miles),
Desvio = round(sd(precio_en_miles),0))
# armo boxplots paralelos segun el tipo de propiedad (casa, dpto o ph)
ggplot(datos_limpios, aes(y = precio_en_miles, group = property_type, fill = property_type )) +
geom_boxplot() +
labs(title = "Boxplots de precios por tipo de propiedad")+
theme(legend.position = 'none') +
scale_fill_brewer(palette = "PRGn") +
labs(y = "Precio en miles de USD") +
labs(x = "Tipo de propiedad") +
facet_wrap(~ property_type)
# Acotando la escala del grafico para visualizar mejor el 50% centra de datos
ggplot(datos_limpios, aes(y = precio_en_miles, group = property_type, fill = property_type )) +
geom_boxplot() +
labs(title = "Boxplots de precios por tipo de propiedad (escala acotada)")+
scale_fill_brewer(palette = "PRGn") +
theme(legend.position = 'none') +
scale_y_continuous(limits = c(0, 1000)) +
labs(y = "Precio en miles de USD") +
labs(x = "Tipo de propiedad") +
facet_wrap(~ property_type)
library(GGally)
datos_limpios %>%
# descartando variables no numéricas y el precio para no duplicar la información que ya tenemos en precio_en_miles
select(-c("id", "l3", "price")) %>%
ggpairs(., aes(color = property_type), upper = list(continuous = wrap("cor", size = 3, hjust=0.7)), legend = 25) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, vjust=0.5), legend.position = "bottom")
# grafico los precios en funcion superficie para detectar algun outlier visualmente
ggplot(datos_limpios, aes(x = surface_total, y = precio_en_miles, color = property_type)) +
geom_point(alpha = 0.75) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "none") +
theme_minimal() +
labs(y = "Precios en miles", x = "Superficie total") +
ggtitle("Scatterplot: precios en función de superficie total")
# se grafica adicionalmente la variable rooms para detectar presencia de valores atípicos
ggplot(datos_limpios, aes(x = rooms, y = precio_en_miles, color = property_type)) +
geom_point(alpha = 0.75) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "none") +
theme_minimal() +
labs(y = "Precios por metro cuadrado", x = "Número de habitaciones") +
ggtitle("Scatterplot: precios en función del número de habitaciones")
# chequeo algunos registros que parecen atípicos
max(datos_limpios$surface_total)
max(datos_limpios$rooms)
datos_limpios %>%
filter(surface_total == 126062 | rooms == 32)
# descarto 2 registros con valores atípicos
datos_sin_outliers <- datos_limpios %>%
filter(surface_total != 126062, rooms != 32)
# grafico nuevamente sin ese registro que como se corroboró era un valor atípico producto de un error de carga o algun otro problema
ggplot(datos_sin_outliers, aes(x = surface_total, y = precio_en_miles, color = property_type)) +
geom_point(alpha = 0.75) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "none") +
theme_minimal() +
labs(y = "Precios en miles", x = "Superficie total") +
ggtitle("Scatterplot: precios en función de superficie total")
ggplot(datos_sin_outliers, aes(x = rooms, y = precio_en_miles, color = property_type)) +
geom_point(alpha = 0.75) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "none") +
theme_minimal() +
labs(y = "Precios en miles", x = "Número de habitaciones") +
ggtitle("Scatterplot: precios en función del número de habitaciones")
# armo una nueva variable que sea precios por metro (superficie)
datos_sin_outliers <- datos_sin_outliers %>%
mutate(pxmt = round(price/surface_total,0))
summary(datos_sin_outliers$pxmt)
# Armo histograma de precios x metro cuadrado
ggplot(data = datos_sin_outliers, aes(x = pxmt)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de precios por m2 de propiedades") +
labs(x = "Precio por m2")
pxmt_sup = IQR(datos_sin_outliers$pxmt) * 3 + quantile(datos_sin_outliers$pxmt, 0.75)
pxmt_sup
pxmt_inf = quantile(datos_sin_outliers$pxmt, 0.25) - IQR(datos_sin_outliers$pxmt) * 3
pxmt_inf
rooms_sup = IQR(datos_sin_outliers$rooms) * 3 + quantile(datos_sin_outliers$rooms, 0.75)
rooms_sup
rooms_inf = quantile(datos_sin_outliers$rooms, 0.25) - IQR(datos_sin_outliers$rooms) * 3
rooms_inf
datos_sin_outliers = datos_sin_outliers %>%
filter(between(pxmt, 750, pxmt_sup), between(rooms, 0, rooms_sup)) # redondeo en 500 el 496.5 y pongo el valor minimo de una casa no puede ser menor a 10 mil
glimpse(datos_sin_outliers)# 49835
nrow(datos_limpios) - nrow(datos_sin_outliers)
# Tabla de estadisticas descriptivas de la variable precio para el nuevo conjunto de datos sin outliers
datos_sin_outliers %>%
summarise(Minimo = min(precio_en_miles),
Q1 = quantile(precio_en_miles, probs = 0.25),
Mediana = quantile(precio_en_miles, probs = 0.5),
Promedio = round(mean(precio_en_miles),0),
Q3 = quantile(precio_en_miles, probs = 0.75),
Maximo = max(precio_en_miles),
Desvio = round(sd(precio_en_miles),0))
# Armo histograma para ver distribucion de precios en miles del nuevo dataset
ggplot(data = datos_sin_outliers, aes(x = precio_en_miles)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de precios de propiedades") +
labs(x = "Precio en miles de USD")
# Tabla de estadisticas descriptivas por tipo de propiedad
datos_sin_outliers %>%
group_by(property_type) %>%
summarise(Minimo = min(precio_en_miles), Q1 = quantile(precio_en_miles, probs = 0.25), Mediana = quantile(precio_en_miles, probs = 0.5), Promedio = round(mean(precio_en_miles),0), Q3 = quantile(precio_en_miles, probs = 0.75),  Maximo = max(precio_en_miles), Desvio = round(sd(precio_en_miles),0))
# Armo boxplots paralelos segun el tipo de propiedad (casa, dpto o ph) con el nuevo dataset
ggplot(datos_sin_outliers, aes(y = precio_en_miles, fill = property_type )) +
geom_boxplot() +
labs(title = "Boxplots de precios por tipo de propiedad")+
theme(legend.position = 'none') +
scale_fill_brewer(palette = "PRGn") +
scale_y_continuous() +
labs(y = "Precio en miles de USD") +
labs(x = "Tipo de propiedad") +
facet_wrap(~ property_type)
# Armo boxplots paralelos de precios por metro cuadrado segun el tipo de propiedad sin outliers
ggplot(datos_sin_outliers, aes(y = precio_en_miles, fill = property_type )) +
geom_boxplot() +
labs(title = "Boxplots de precios por tipo de propiedad") +
theme(legend.position = 'none') +
theme_minimal() +
scale_fill_brewer(palette = "PRGn") +
scale_y_continuous() +
labs(y = "Precio en miles") +
labs(x = "Tipo de propiedad") +
facet_wrap(~ property_type)
# armo scatterplot de precios en miles en función de superficie total
ggplot(datos_sin_outliers, aes(x = surface_total, y = precio_en_miles, color = property_type)) +
geom_point(alpha = 0.75) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "none") +
theme_minimal() +
labs(y = "Precios en miles", x = "Superficie total") +
ggtitle("Scatterplot: precios en función de superficie total")
# Armo histograma de precios x metro cuadrado
ggplot(data = datos_sin_outliers, aes(x = pxmt)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de precios por m2 de propiedades") +
labs(x = "Precio por m2")
datos_sin_outliers %>%
# descartando variables no numéricas y el precio para no duplicar la información que ya tenemos en precio_en_miles
select(-c("id", "l3", "price", "pxmt")) %>%
ggpairs(., aes(color = property_type), upper = list(continuous = wrap("cor", size = 3, hjust=0.7)), legend = 25) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, vjust=0.5), legend.position = "bottom")
glimpse(datos_sin_outliers)
write.csv(datos_sin_outliers %>% select(-c(pxmt)), file = "properati_preprocesado.csv", row.names=FALSE)
datos_properati <- read.csv("properati_preprocesado.csv")
# creamos nueva variable de superficie descubierta
datos_properati = datos_properati %>%
mutate(surface_uncovered = surface_total - surface_covered)
# creamos variables log
datos_properati = datos_properati %>%
mutate(log.price = log(price), log.rooms = log(rooms), log.bathrooms = log(bathrooms), log.surf_cov = log(surface_covered))
head(datos_properati)
summary(df6)
summary(datos_properati)
# fijamos semilla
set.seed(2021)
# Partición Train y Test, indicando proporción
train_test <- initial_split(datos_properati, prop = 0.75)
train_data <- training(train_test)
test_data <- testing(train_test)
# vemos las dimensiones de cada particion
train_data %>%
dim_desc()
test_data %>%
dim_desc()
# Armo Modelo que explica el precio en función de las variables barrio, habitaciones, banos, superficie y tipo de propiedad
modelo_log <- lm(log.price ~ l3 + log.rooms + log.bathrooms + log.surf_cov + surface_uncovered + property_type, data = train_data)
tidy(modelo_log)
summary(modelo_log)
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
g6 <- ggplot(eval2, aes(.resid/1000)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de Residuos") +
theme(legend.position = 'none') +
labs(y = "Cuenta") +
labs(x = "Residuos")
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)")
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos")
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)")
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)")
# organizo graficos para mostrarlos juntos
library(gridExtra)
grid.arrange(g6, g7, g8, g9, g10)
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)")
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos")
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)")
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)")
# organizo graficos para mostrarlos juntos
grid.arrange(g7, g8, g9, g10)
library(caret)
# para ejecutar el anti-log usamos función exponencial
fitted_antilog = exp(eval2$.fitted)
# calculamos RMSE y R2 para las variables originales y no log(price) para que sea comparable con los demás modelos
metricas = round(postResample(fitted_antilog, train_data$price),4)
metricas
metricas
# modelo completo sin log
modelo_completo <- lm(price ~ l3 + rooms + bathrooms + surface_covered + surface_uncovered + property_type, data = train_data)
summary(modelo_completo)
# modelo completo sin log
modelo_completo <- lm(price ~ l3 + rooms + bathrooms + surface_covered + surface_uncovered + property_type, data = train_data)
# modelo log
modelo_log <- lm(log.price ~ l3 + log.rooms + log.bathrooms + log.surf_cov + surface_uncovered + property_type, data = train_data)
# armamos lista con todos los modelos
models <- list(modelo_completo = modelo_completo, modelo_log = modelo_log)
# calculamos las variables resumen
purrr::map_df(models, broom::tidy, .id = "model")
tidy(modelo_completo, conf.int = TRUE) %>% arrange(p.value)
tidy(modelo_log, conf.int = TRUE) %>% arrange(p.value)
# calculamos las métricas para todos los modelos
df_evaluacion_train = map_df(models, broom::glance, .id = "model") %>%
# ordenamos por R2 ajustado
arrange(desc(adj.r.squared))
df_evaluacion_train
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)")
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos")
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)")
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)")
# organizo graficos para mostrarlos juntos
grid.arrange(g7, g8, g9, g10)
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)") +
theme_bw()
# organizo graficos para mostrarlos juntos
grid.arrange(g7, g8, g9, g10)
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
g6 <- ggplot(eval2, aes(.resid/1000)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de Residuos") +
theme(legend.position = 'none') +
labs(y = "Cuenta") +
labs(x = "Residuos")
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)") +
theme_bw()
# organizo graficos para mostrarlos juntos
grid.arrange(g6, g7, g8, g9, g10)
eval2 <- broom::augment(modelo_log, train_data)
# grafico histograma de los residuos
g6 <- ggplot(eval2, aes(.resid/1000)) +
geom_histogram(col = "white", aes( fill = ..count..), alpha = 0.75) +
labs(title = "Histograma de Residuos") +
theme(legend.position = 'none') +
labs(y = "Cuenta") +
labs(x = "Residuos") +
theme_bw()
# grafico de residuos en funcion de valores predichos
g7 <-ggplot(eval2, aes(.fitted/1000, .resid/1000)) +
geom_point(alpha = 0.5) +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Distribución de Residuos")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# grafico de residuos estandarizados en funcion de valores predichos
g8 <- ggplot(eval2, aes(sample= .std.resid))+
stat_qq(alpha = 0.5)+
geom_abline(color = "blue")+
labs(title = "QQ-plot de Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Residuos") +
labs(x = "Cuantiles teóricos") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g9 <-ggplot(eval2, aes(.fitted/1000, sqrt(abs(.std.resid))))+
geom_point(alpha = 0.5) +
geom_smooth(se = FALSE)+
labs(title = "Distribución Raíz de residuos estand.")+
theme(legend.position = 'none') +
labs(y = "Raíz Resid.estand.") +
labs(x = "Predicción precio (miles USD)") +
theme_bw()
# gráfico de la distribución de la raíz de residuos estandarizados
g10 <-ggplot(eval2, aes(.hat, .std.resid)) +
geom_vline(size = 2, colour = "white", xintercept = 0) +
geom_hline(size = 2, colour = "white", yintercept = 0) +
geom_point(alpha = 0.7) + geom_smooth(se = FALSE) +
labs(title = "Leverage vs. Residuos estandarizados")+
theme(legend.position = 'none') +
labs(y = "Resid. estand.") +
labs(x = "Leverage (hat matrix)") +
theme_bw()
# organizo graficos para mostrarlos juntos
grid.arrange(g6, g7, g8, g9, g10)
g6
grid.arrange(g7, g8, g9, g10)
summary(modelo_log)
modelo_log2 <- lm(log.price ~ l3 + rooms + bathrooms + surface_covered + surface_uncovered + property_type, data = train_data)
summary(modelo_log2)
eval3 = broom::augment(modelo_log2, train_data)
# para ejecutar el anti-log usamos función exponencial
fitted_antilog2 = exp(eval3$.fitted)
# calculamos RMSE y R2 para las variables originales y no log(price) para que sea comparable con los demás modelos
metricas2 = round(postResample(fitted_antilog2, train_data$price),4)
metricas2
models <- list(modelo_log = modelo_log, modelo_log2 = modelo_log2)
# calculamos las variables resumen
purrr::map_df(models, broom::tidy, .id = "model")
df_evaluacion_train = map_df(models, broom::glance, .id = "model")
df_evaluacion_train
modelos = data.frame(list(metricas1 = metricas, metricas2 = metricas2))
modelos
lista_predicciones_testing = map(.x = models, .f = augment, newdata = test_data)
lista_predicciones_testing
metricast = round(postResample(lista_predicciones_testing$modelo_log$.fitted, test_data$price),4)
metricas2t = round(postResample(lista_predicciones_testing$modelo_log2$.fitted, test_data$price),4)
modelost = data.frame(list(metricas1t = metricast, metricas2t = metricas2t))
modelost
